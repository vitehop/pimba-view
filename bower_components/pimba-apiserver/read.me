MODULUS DEPLOY
--------------

modulus login // victorperez.glez@gmail.com / xcua...
modulus deploy

HEROKU DEPLOY
-------------

heroku login // victorperez.glez@gmail.com / Vjar..
heroku create // ?? Crea una nueva app siempre? nose si es necesario
git push heroku master // lo subes
heroku open // abre en navegador la web

INICIO DE APP CON EXPRESS
-------------------------

nodemon // install y utilizar como node para que no sea necesario reiniciar para ver cambios


Pimba! - RESTful API

Docs:

/api/login							POST	: Crea y devuelve un token de autenticación (username y password como parámetros)

/api/users							GET		: Devuelve los detalles del usuario logado, incluyendo sus perspectivas
/api/users							POST	: Crea un nuevo usuario (username y password como parámetros)
/api/users							PUT		: Update los detalles del usuario logado (detalles del usuario como parámetros)

/api/cards/<card_id> 				GET 	: Devuelve los detalles de una tarjeta
/api/cards		 					POST 	: Crea una tarjeta (detalles de la tarjeta como parámetros)
/api/cards/<card_id>				PUT		: Actualiza los detalles de una tarjeta (detalles como parámetro)
/api/cards/<card_id>				DELETE	: Elimina una tarjeta

/api/perspectives/<card_id>			GET		: Devuelve la perspectiva de esa tarjeta
/api/perspectives					POST	: Crea una nueva perspectiva para el usuario logado (Card ID como parámetro)
/api/perspectives					DELETE	: Elimina una perspectiva del usuario logado (Card ID como parámetro)


Concepto de perspectivas
========================
Para simplificar, el conjunto de perspectivas de un usuario es un listado de IDs de tarjeta.
Siempre que el usuario cree una tarjeta nueva sin estar anidada dentro de otra, automáticamente se incluirá entre sus perspectivas.
Manualmente, el usuario puede guardar como perspectiva cualquier otra tarjeta anidada.
(Ver mockups)


Cómo funciona la autenticación
==============================
1) Un usuario existente se logea en POST /api/login con los parámetros username(String) y password(String).

2) La API responde con un token.

3) El cliente almacena este token donde quiera/pueda (sesión, etc)

4) Para el resto de requests, el cliente incluye un header "Authorization" en su request con el valor: "Bearer <token>"

5) El token es válido durante 60 minutos, pasado ese tiempo se solicita otro en /api/login (no es necesario incluir el header)

- Los usuarios nuevos se crean en POST /api/users con los parámetros username y password (no es necesaria autenticación)


API Docs
========

/api/login							POST	: Crea y devuelve un token de autenticación. NO REQ. AUTENTIACION

	  Params:
	  username (String)
	  password (String)

		Example response:
		{
token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU0M2E4ZGVlMmQ0YTQ4ZjgzZjAwMDAwMSIsImlhdCI6MTQxMzEyMzg4NCwiZXhwIjoxNDEzMTI3NDg0fQ.QOURHM8TTOj3zyOKXtAYWApAwPICfaBK0-Jxv0vMe-0"
}



/api/users							GET		: Devuelve los detalles del usuario logado, incluyendo sus perspectivas REQ. AUTENTICACION.


		Example response:
		
		{
		password: "$2a$10$N3KZv5IkqxtyJCJbqFRjyux5k/qCYfb8SRTx/GLEhSSykSWzOtEdG"
		username: "pimba-tests"
		_id: "543a8dee2d4a48f83f000001"
		__v: 0
		perspectives: [0]
		}


/api/users							POST	: Crea un nuevo usuario. NO REQUIERE AUTENTICACIÓN


	  Params:
	  username (String)
	  password (String)

	  Example response:

	 	{
		message: "User created!"
		}



/api/users							PUT		: Update los detalles del usuario logado 

	Params:
	username (String) (Optional)
	password (String) (Optional)

	  Example response:

	 	{
		message: "User updated!"
		}

/api/cards/<card_id> 				GET 	: Devuelve los detalles de una tarjeta
/api/cards		 					POST 	: Crea una tarjeta (detalles de la tarjeta como parámetros)
/api/cards							PUT		: Actualiza los detalles de una tarjeta (card ID y detalles como parámetros)
/api/cards							DELETE	: Elimina una tarjeta (Card ID como parámetro)

/api/perspectives/<card_id>			GET		: Devuelve la perspectiva de esa tarjeta
/api/perspectives					POST	: Crea una nueva perspectiva para el usuario logado (Card ID como parámetro)
/api/perspectives					DELETE	: Elimina una perspectiva del usuario logado (Card ID como parámetro)













